// Sketch Plugin: AEFlowchart - InputOutput (ctrl shift o)
// Source: github.com/tadija/AEFlowchart
// Version: 2.0

@import 'AEFlowchart.cocoascript'
@import 'Settings.cocoascript'

function createInputOutputStep(context) {
  /*  call AEFlowchart main function with custom name and shape function  */
  createStep("InputOutput", inputOutputShape, context);
}

/*  draw input-output parallelogram shape for given label  */
function inputOutputShape(label)
{
  // get label size
  var labelFrame = [label frame];
  var labelWidth = [labelFrame width];
  var labelHeight = [labelFrame height];

  // set shape padding
  var minPadding = 24.0;
  var maxPadding = 48.0;
  // horizontal
  var shapeHorizontalPadding = labelWidth * 0.3;
  if(shapeHorizontalPadding < minPadding) shapeHorizontalPadding = minPadding;
  if(shapeHorizontalPadding > maxPadding) shapeHorizontalPadding = maxPadding;
  // vertical
  var shapeVerticalPadding = 12.0;

  // create shape path
  var shapePath = [NSBezierPath bezierPath];
  [shapePath moveToPoint:CGPointMake([labelFrame minX], [labelFrame minY] - shapeVerticalPadding)];
  [shapePath lineToPoint:CGPointMake([labelFrame maxX] + shapeHorizontalPadding, [labelFrame minY] - shapeVerticalPadding)];
  [shapePath lineToPoint:CGPointMake([labelFrame maxX], [labelFrame maxY] + shapeVerticalPadding)];
  [shapePath lineToPoint:CGPointMake([labelFrame minX] - shapeHorizontalPadding, [labelFrame maxY] + shapeVerticalPadding))];
  [shapePath closePath];

  // create shape
  var shape = [MSShapeGroup shapeWithBezierPath: shapePath];

  // set style
  var shapeStyle = [shape style];
  var fills = [shapeStyle fills];
  if([fills count] <= 0) [fills addNewStylePart];
  var shapeFill = [shapeStyle fill];

  // add gradient fill
  [shapeFill setFillType: 1];
  var gradient = [shapeFill gradient];
  [gradient setColor:[MSColor colorWithSVGString:readValueForKey(Keys.inputOutputColor1Key)] atIndex:0];
  [gradient setColor:[MSColor colorWithSVGString:readValueForKey(Keys.inputOutputColor2Key)] atIndex:1];

  if (readValueForKey(Keys.shapeInnerShadowKey) == 1) {
    // add default inner shadow
    var innerShadows = [shapeStyle innerShadows];
    if([innerShadows count] <= 0) [innerShadows addNewStylePart];
  }

  return shape;
}
